'use strict'

getRouteElement = \exportToAspen ->
  return (->) unless ? window

  changeRouteToHash = \route ->
    hashPrefix + route

  exportEvent = \key \event ->
    if isFunction exportToAspen
      capsule =
        event   : getEventValue event
        handler : handlers[key]
        label   : labels[key]
      exportToAspen capsule

  # Gets the true hash value. Cannot use `location.hash` directly due
  # to bug in Firefox where `location.hash` will always be decoded.
  getCurrentHashRoute = \window ->
    match = window.location.href.match hashRegex
    if match then match[1] else ''

  getEventHandler = (fn, key) ->
    switch
      when (fn == true)    then exportEvent key
      when (isFunction fn) then fn
      else null
  
  getEventValue = \event ->
    if isPopStateEvent event
      event.state
    else
      getCurrentHashRoute window

  getLegacyConfig = ->
    {
      exportToAspen
      getCurrentHashRoute
      handler : handlers.hash
      label   : labels.hash
      setHash
    }

  isFunction = \val ->
    typeof val == 'function'

  isPopStateEvent = \event ->
    event && event.state

  isString = \val ->
    ObjProto.toString.call val == stringIdentifier

  isViableHash = \route ->
    isString route && route != getCurrentHashRoute window

  isViablePath = \route ->
    isString route && route != location.pathname

  manageHashRouting = (route, hashHandler) ->
    if isViableHash route
      setHash (route, window)
      setHashMonitoring hashHandler

  managePathRouting = (route, pathHandler) ->
    setPath route if isViablePath route
    setPathHandler pathHandler

  refusesHashRouting = \hash ->
    ! hash

  Route = \config ->
    { hash, onHashChange, onPathChange, path } = config
    if refusesHashRouting hash && supportsPushState
      managePathRouting (path, onPathChange)
    else
      manageHashRouting (hash, onHashChange)

  setHash = (route, window) ->
    window.location.hash = changeRouteToHash route if window

  setHashMonitoring = \hashHandler ->
    if supportsHashChange
      window.onhashchange = getEventHandler (hashHandler, 'hash')
    else
      useIFrameAndPolling ()

  setPath = \path ->
    history.pushState (path, title, path)

  setPathHandler = \pathHandler ->
    window.onpopstate = getEventHandler (pathHandler, 'pathname')

  useIFrameAndPolling = ->
    getLegacySupport    = require './legacySupport'
    useIFrameAndPolling = getLegacySupport (getLegacyConfig ())
    useIFrameAndPolling ()

  handlers           = { hash: 'onHashChange', pathname: 'onPathChange' }
  hashPrefix         = '#'
  hashRegex          = /#(.*)$/
  history            = window.history
  labels             = { hash: 'Hash', pathname: 'Path' }
  location           = document.location
  ObjProto           = Object.prototype
  stringIdentifier   = '[object String]'
  supportsHashChange = !! ('onhashchange' of window)
  supportsPushState  = !! (history && history.pushState)
  title              = document.title

  return Route

module.exports = getRouteElement
